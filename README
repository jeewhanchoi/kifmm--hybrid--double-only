--------------------
FMM benchmark 
--------------------

How to compile
--------------------
type from FMM root directory:
make clean; make

How to execute 
--------------------
fmmd--<naive,omp,omp_sse,omp_sse_block,cuda,hybrid1,hybrid2,hybrid3> <# pts> \
	<uniform,ellipseUniformAngles> <pts/box>


Description
--------------------
This benchmark includes CPU, GPU, and CPU+GPU hybrid implementations
for the fast multipole method (FMM) in double-precision.

The benchmark generates the follwing executables,

- fmmd--naive: Baseline sequential code

- fmmd--omp: OpenMP parallelized code

- fmmd--omp_sse: OpenMP parallelized 
            + SIMD vectorized code

- fmmd--omp_sse_block: OpenMP parallelized 
                  + SIMD vectorized 
                  + Blocking (translation vector)
                  + Blocking (up)

- fmmd--cuda: CUDA code

- fmmd--hybrid1: U-list on GPU; up, V-list, down on CPU 

- fmmd--hybrid2: U-list on CPU; up, V-list, down on GPU

- fmmd--hybrid3: A optimal schedule for non-uniform 
distributions on hybrid CPU-GPU systems

Environment Variables
---------------------
- NUMA-aware memory allocation can be set/unset using the 
env variable "NUMA". Default = yes.

NOTE: When doing NUMA-aware memory allocation, threads must 
be pinned appropriately using "KMP_AFFINITY (icc) / GOMP_
AFFINITY (gcc)" env variable
e.g. 
export KMP_AFFINITY=granularity=fine,compact,1,0,verbose
  (without hyperthreading)
export KMP_AFFINITY=granularity=fine,compact,verbose
  (with hyperthreading)


- Number of threads can be varied by changing env variable 
"OMP_NUM_THREADS". Default = Max #threads.

- When blocking is enabled, translation block size can be 
set by the env variable "BS". Default = 49.

- When blocking is enabled, up block size can be set by the 
env variable "UPBS". Default = 1000. 
 
- Accuracy can be varied by changing the env variable "NP".
Default = 6.
On the GPU, only 3 precision are supported (NP=3, NP=4, 
and NP=6). 
#define NP_(X) in cuda.cu must also be set to 1 (all others
set to 0) and re-compiled  in order for the GPU version to work.
"env NP=X" must also be set as the GPU code uses CPU's tree
construction code.

- Error is computed as by taking a random sample. This 
paramter can be varied by changing the env variable "NV". 
Default = 1000.


Example usage
---------------------
./fmmd--cuda 4194304 uniform 512 # with NP_6 set to 1, GPU FMM with uniform 
																 # distribution and 6 digits of precision
env NP=4 ./fmmd--cuda 1048576 uniform 512 # with NP_4 set to 1, GPU FMM with
																					# uniform distribution and 4 digits of
																					# precision
env NP=3 ./fmmd--omp_sse_block 1048576 uniform 128 # most optimized CPU FMM 
																									 # with 3 digits of 
																									 # precision


Things of note
---------------------
1) By default, for the GPU version, all data structures are 
allocated in the memory prior to execution.
However, due to CUFFT taking too much memory, for large number 
of points and/or higher precision, there is support to  
allocate data as they are needed.
This can be automatically turned on and off setting the 
MIN_DATA definition found in partial.h to 1 or 0.


